There is no point in making n^2 comparisons.
Since the structure of linkedlist remains the same after the intersection node, it is efficient to start at which the two 
LinkedLists lengths match.
So, First find the lengths of two linkedlists.
Try to reach the same lengths.
Then compare


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode temp1 = headA;
        ListNode temp2 = headB;
       
        int length1 = getLength(headA);
        int length2 = getLength(headB);
        if(length1>length2)
        {   
            while(length1!=length2){
            temp1 = temp1.next;
            length1--;
            }
        }
        
        else if(length2>length1)
        {
             while(length1!=length2){
            temp2 = temp2.next;
            length2--;
            }
        }
      
    while(temp1!=temp2)
    {
        temp1= temp1.next;
        temp2 = temp2.next;
    }
    
        return temp1;
        
    }
    
    
    public int getLength(ListNode h)
    {
        int length =0;
        while(h!=null)
        {
            length++;
            h = h.next;
        }
        return length;
    }
}
