Same as level order traversal except for at alternate depths we reverse the arraylist

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
     List<List<Integer>> result = new ArrayList<>();
        
        if(root==null)
            return result;
    Queue<TreeNode> traverse = new LinkedList<>();
         traverse.add(root);
        int depth =0;
    while(!traverse.isEmpty())
    {
        
       ArrayList<Integer> temp = new ArrayList<>();
        
        int s = traverse.size();
        
        for(int i=0;i<s;i++)
        {
            
            System.out.println(depth);
            TreeNode level = traverse.poll();
                temp.add(level.val);
            if(level.left!=null) traverse.offer(level.left);
            if(level.right!=null) traverse.offer(level.right);
            
            
        }
       
        if(depth%2==1)
           Collections.reverse(temp);
        result.add(temp);
        
        
         depth++;
        
        
    }
        return result;
        
    }
}
