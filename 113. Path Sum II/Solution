

1. Create a helper method that returns all the possible paths from root to leaf.
2. Recurse in the left and right subtrees and subtract the root values from sum
3. Once we reach the leaf node check to see if the leaf's value is equal to the sum remaining. Only then add the corresponding
   path to the result.
   


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList<>();
        ArrayList<Integer> path = new ArrayList<>();
        if(root ==null)
            return result;
        helper(root,sum, path, result);
//         int len = result.size();
//         for(int i=0;i<len;i++)
//         {
//             System.out.println(" size" + result.size());
//             int count =0;
//             for(int j=0; j< result.get(i).size();j++)
//             {
                
//                 count +=result.get(i).get(j);
                
//             }
//             System.out.println(count);
                
//             if(count!=sum)
//                 result.remove(i);
//             len--;
            
//         }
        return result;
    }
    
    
    
    public void helper(TreeNode root,int sum, List<Integer> path , List<List<Integer>> result)
    {
        
        if(root==null)
            return;
        if(root.left==null && root.right ==null && sum ==root.val){
            result.add(path);
        }
        path.add(root.val);
        helper(root.left, sum-root.val, new ArrayList<Integer>(path), result);
        helper(root.right,sum-root.val, new ArrayList<Integer>(path), result);        
            
    }
}
