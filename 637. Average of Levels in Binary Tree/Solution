1. Traverse the tree by level. Use a queue.
2. Add root to the queue. Add its value to the sum. Poll it. 
3. Add its left and right children. Make sure to update the size of queue after each loop to make sure that we are at the same level.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> result = new ArrayList<>();
    	
    	Queue<TreeNode> myQueue = new LinkedList<>();
        myQueue.add(root);
       
        while(!myQueue.isEmpty())
        {
        	 int s = myQueue.size();
        double sum =0;
        	
        	
        	for(int i=0;i<s;i++)// Make sure that this is appropriate queue size
        	{
        		TreeNode some = myQueue.poll();
                
                sum += some.val;
                

                
        		if(some.left!=null) 
        			myQueue.offer(some.left);
        		
        		if(some.right!=null)
        			myQueue.offer(some.right);
        	}
        	result.add(sum/s);
        }
        return result;
        
    }
        
    }
