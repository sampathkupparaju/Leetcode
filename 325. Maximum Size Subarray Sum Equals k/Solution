we all know that sum = sum + nums[i] always gets the latest accumulation.
If we hit k, then we write down the index + 1 as the current MAX length(which is the length from 0 -> i).

Now the question comes, what happens when the longest window is in the middle of the array?

Eg. nums = [1, -1, 3, 5, -4, 1, 1, 3] k = 3

Some potential solutions,
solution #1 = [1, -1, 3]
solution #2 = [-1, 3, 5, -4]
solution #3 = [5, -4, 1, 1]

The question is, when to ditch the current accumulation and start over, eg solution#2,
we know that starting from -1 to -4, that's a longer solution. lets denote sum from 0 -> i, sum(0, i)),

sum(0, i) - sum(0, j) = sum(j ,i) , where j < i

We know that sum(j, i) is actually the "K" we are looking for, therefore, we can write it as,

sum(0, i) - sum(0,j) = K

Rewriting the equation,
sum(0, i) - K = sum(0, j)

If this sum(0, j) really exist, then that means we got another solution which is from j -> i.

To keep track of the sum every step of the way, the solution used map, and knowing sum(0, j) is not sufficient,
because we are trying to find the LENGTH, therefore, we need to get the map.get(sum(0, j)) which is actually j itself.

As a result, i - map.get(sum(0, j)) becomes a potential solution.



class Solution {
    public int maxSubArrayLen(int[] nums, int k) {
        int max =0;
        int sum =0;
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i=0;i<nums.length;i++)
        {
            sum = sum + nums[i];
            if(sum ==k)
                max = i+1;
            if(map.containsKey(sum-k))
                max =Math.max(max, i- map.get(sum-k));
            if(!map.containsKey(sum))
                map.put(sum, i);
            
        }
        
        return max;
        
    }
}
