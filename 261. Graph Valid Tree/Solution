This is a union find problem.

According to the definition of tree on Wikipedia:
“a tree is an undirected graph in which any two vertices are connected by exactly one path.
In other words, any connected graph without simple cycles is a tree.”

We create a new array and initialize all the values to be -1.
The we start through the graph and see what is the edge that connects the current two nodes.

So initally we have

[[0,1], [0,2], [0,3], [1,4]]



0     1    2    3    4 
-1   -1    -1   -1   -1


after first edge

0    1    2    3    4 
1   -1    -1   -1   -1


after second edge

0     1    2    3    4 
1     2    -1   -1   -1


after third edge

0     1    2    3    4 
1     2    3   -1   -1


after fourth edge

0     1    2    3    4 
1     2    3    4   -1











class Solution {
    public boolean validTree(int n, int[][] edges) {
        int [] nums = new int[n];
        for(int i=0;i<nums.length;i++)
            nums[i]= -1;
        for(int i=0;i<edges.length;i++)
        {
        int x = find(nums, edges[i][0]);
            int y = find(nums, edges[i][1]);
            if (x==y)
                return false;
            nums[x]=y;
        }
        
        return edges.length==n-1;
    }
    
    public int find(int[] nums, int i)
    {
        if(nums[i]==-1)
            return i;
        return find(nums, nums[i]);
    }
}
